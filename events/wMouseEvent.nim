## This event object contains information about the events generated by the mouse.
## wNim passes wMouseEvent to event handler for mouse events, instead of wEvent.
## :Superclass:
##    wEvent
## :Events:
##    ==============================  =============================================================
##    Events                          Description
##    ==============================  =============================================================
##    wEvent_LeftDown                 The left button was pressed.
##    wEvent_LeftUp                   The left button was released.
##    wEvent_MiddleDown               The middle button was pressed.
##    wEvent_MiddleUp                 The middle button was released.
##    wEvent_RightDown                The right button was pressed.
##    wEvent_RightUp                  The right button was released.
##    wEvent_Motion                   Same as wEvent_MouseMove.
##    wEvent_MouseMove                The cursor moves.
##    wEvent_LeftDoubleClick          The the left button was double-clicked
##    wEvent_MiddleDoubleClick        The the middle button was double-clicked
##    wEvent_RightDoubleClick         The the right button was double-clicked
##
##    ==============================  =============================================================
##    wEvent_NcLeftDown               wEvent_LeftDown within the nonclient area
##    wEvent_NcLeftUp                 wEvent_LeftUp within the nonclient area
##    wEvent_NcMiddleDown             wEvent_MiddleDown within the nonclient area
##    wEvent_NcMiddleUp               wEvent_MiddleUp within the nonclient area
##    wEvent_NcRightDown              wEvent_RightDown within the nonclient area
##    wEvent_NcRightUp                wEvent_RightUp within the nonclient area
##    wEvent_NcMotion                 wEvent_Motion within the nonclient area
##    wEvent_NcMouseMotion            wEvent_MouseMove within the nonclient area
##    wEvent_NcLeftDoubleClick        wEvent_LeftDoubleClick within the nonclient area
##    wEvent_NcMiddleDoubleClick      wEvent_MiddleDoubleClick within the nonclient area
##    wEvent_NcRightDoubleClick       wEvent_RightDoubleClick within the nonclient area
##    ==============================  =============================================================

const
  wEvent_LeftDown* = WM_LBUTTONDOWN
  wEvent_LeftUp* = WM_LBUTTONUP
  wEvent_MiddleDown* = WM_MBUTTONDOWN
  wEvent_MiddleUp* = WM_MBUTTONUP
  wEvent_RightDown* = WM_RBUTTONDOWN
  wEvent_RightUp* = WM_RBUTTONUP
  wEvent_Motion* = WM_MOUSEMOVE
  wEvent_MouseMove* = WM_MOUSEMOVE
  wEvent_LeftDoubleClick* = WM_LBUTTONDBLCLK
  wEvent_MiddleDoubleClick* = WM_MBUTTONDBLCLK
  wEvent_RightDoubleClick* = WM_RBUTTONDBLCLK
  wEvent_NcLeftDown* = WM_NCLBUTTONDOWN
  wEvent_NcLeftUp* = WM_NCLBUTTONUP
  wEvent_NcMiddleDown* = WM_NCMBUTTONDOWN
  wEvent_NcMiddleUp* = WM_NCMBUTTONUP
  wEvent_NcRightDown* = WM_NCRBUTTONDOWN
  wEvent_NcRightUp* = WM_NCRBUTTONUP
  wEvent_NcMotion* = WM_NCMOUSEMOVE
  wEvent_NcMouseMove* = WM_NCMOUSEMOVE
  wEvent_NcLeftDoubleClick* = WM_NCLBUTTONDBLCLK
  wEvent_NcMiddleDoubleClick* = WM_NCMBUTTONDBLCLK
  wEvent_NcRightDoubleClick* = WM_NCRBUTTONDBLCLK
  wEvent_MouseFirst = WM_MOUSEFIRST
  wEvent_MouseLast = WM_MOUSELAST

proc isMouseEvent(msg: UINT): bool {.inline.} =
  msg.isBetween(wEvent_MouseFirst, wEvent_MouseLast)

method getX*(self: wMouseEvent): int {.property.} =
  ## Get x-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.
  result = GET_X_LPARAM(mLparam)

method getY*(self: wMouseEvent): int {.property.} =
  ## Get y-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.
  result = GET_Y_LPARAM(mLparam)

method getPosition*(self: wMouseEvent): wPoint {.property.} =
  ## Get coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.
  result = (getX(), getY())

method leftIsDown*(self: wMouseEvent): bool =
  ## Returns true if the left mouse button is IsDown.
  result = ((mWparam and MK_LBUTTON) != 0)

method rightIsDown*(self: wMouseEvent): bool =
  ## Returns true if the right mouse button is IsDown.
  result = ((mWparam and MK_RBUTTON) != 0)

method middleIsDown*(self: wMouseEvent): bool =
  ## Returns true if the middle mouse button is IsDown.
  result = ((mWparam and MK_MBUTTON) != 0)

method ctrlIsDown*(self: wMouseEvent): bool =
  ## Returns true if the CTRL key is IsDown.
  result = ((mWparam and MK_CONTROL) != 0)

method shiftIsDown*(self: wMouseEvent): bool =
  ## Returns true if the Shift key is IsDown.
  result = ((mWparam and MK_SHIFT) != 0)
